// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChittyChattyService_PublishMessage_FullMethodName   = "/ChittyChatty.ChittyChattyService/PublishMessage"
	ChittyChattyService_BroadcastMessage_FullMethodName = "/ChittyChatty.ChittyChattyService/BroadcastMessage"
	ChittyChattyService_Join_FullMethodName             = "/ChittyChatty.ChittyChattyService/Join"
	ChittyChattyService_Leave_FullMethodName            = "/ChittyChatty.ChittyChattyService/Leave"
	ChittyChattyService_ListenToMessages_FullMethodName = "/ChittyChatty.ChittyChattyService/ListenToMessages"
)

// ChittyChattyServiceClient is the client API for ChittyChattyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChittyChattyServiceClient interface {
	PublishMessage(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	BroadcastMessage(ctx context.Context, in *BroadcastMessageRequest, opts ...grpc.CallOption) (*BroadcastResponse, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	ListenToMessages(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BroadcastMessageRequest], error)
}

type chittyChattyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChittyChattyServiceClient(cc grpc.ClientConnInterface) ChittyChattyServiceClient {
	return &chittyChattyServiceClient{cc}
}

func (c *chittyChattyServiceClient) PublishMessage(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, ChittyChattyService_PublishMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chittyChattyServiceClient) BroadcastMessage(ctx context.Context, in *BroadcastMessageRequest, opts ...grpc.CallOption) (*BroadcastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastResponse)
	err := c.cc.Invoke(ctx, ChittyChattyService_BroadcastMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chittyChattyServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, ChittyChattyService_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chittyChattyServiceClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, ChittyChattyService_Leave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chittyChattyServiceClient) ListenToMessages(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BroadcastMessageRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChittyChattyService_ServiceDesc.Streams[0], ChittyChattyService_ListenToMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListenRequest, BroadcastMessageRequest]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChittyChattyService_ListenToMessagesClient = grpc.ServerStreamingClient[BroadcastMessageRequest]

// ChittyChattyServiceServer is the server API for ChittyChattyService service.
// All implementations must embed UnimplementedChittyChattyServiceServer
// for forward compatibility.
type ChittyChattyServiceServer interface {
	PublishMessage(context.Context, *ChatMessageRequest) (*PublishResponse, error)
	BroadcastMessage(context.Context, *BroadcastMessageRequest) (*BroadcastResponse, error)
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Leave(context.Context, *LeaveRequest) (*LeaveResponse, error)
	ListenToMessages(*ListenRequest, grpc.ServerStreamingServer[BroadcastMessageRequest]) error
	mustEmbedUnimplementedChittyChattyServiceServer()
}

// UnimplementedChittyChattyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChittyChattyServiceServer struct{}

func (UnimplementedChittyChattyServiceServer) PublishMessage(context.Context, *ChatMessageRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedChittyChattyServiceServer) BroadcastMessage(context.Context, *BroadcastMessageRequest) (*BroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastMessage not implemented")
}
func (UnimplementedChittyChattyServiceServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedChittyChattyServiceServer) Leave(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedChittyChattyServiceServer) ListenToMessages(*ListenRequest, grpc.ServerStreamingServer[BroadcastMessageRequest]) error {
	return status.Errorf(codes.Unimplemented, "method ListenToMessages not implemented")
}
func (UnimplementedChittyChattyServiceServer) mustEmbedUnimplementedChittyChattyServiceServer() {}
func (UnimplementedChittyChattyServiceServer) testEmbeddedByValue()                             {}

// UnsafeChittyChattyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChittyChattyServiceServer will
// result in compilation errors.
type UnsafeChittyChattyServiceServer interface {
	mustEmbedUnimplementedChittyChattyServiceServer()
}

func RegisterChittyChattyServiceServer(s grpc.ServiceRegistrar, srv ChittyChattyServiceServer) {
	// If the following call pancis, it indicates UnimplementedChittyChattyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChittyChattyService_ServiceDesc, srv)
}

func _ChittyChattyService_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyChattyServiceServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChittyChattyService_PublishMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyChattyServiceServer).PublishMessage(ctx, req.(*ChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChittyChattyService_BroadcastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyChattyServiceServer).BroadcastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChittyChattyService_BroadcastMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyChattyServiceServer).BroadcastMessage(ctx, req.(*BroadcastMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChittyChattyService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyChattyServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChittyChattyService_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyChattyServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChittyChattyService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyChattyServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChittyChattyService_Leave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyChattyServiceServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChittyChattyService_ListenToMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChittyChattyServiceServer).ListenToMessages(m, &grpc.GenericServerStream[ListenRequest, BroadcastMessageRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChittyChattyService_ListenToMessagesServer = grpc.ServerStreamingServer[BroadcastMessageRequest]

// ChittyChattyService_ServiceDesc is the grpc.ServiceDesc for ChittyChattyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChittyChattyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChittyChatty.ChittyChattyService",
	HandlerType: (*ChittyChattyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishMessage",
			Handler:    _ChittyChattyService_PublishMessage_Handler,
		},
		{
			MethodName: "BroadcastMessage",
			Handler:    _ChittyChattyService_BroadcastMessage_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _ChittyChattyService_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _ChittyChattyService_Leave_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenToMessages",
			Handler:       _ChittyChattyService_ListenToMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto.proto",
}
